#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
/**
 * process - execute the input on shell
 * @cmd: input command
 * Return: 0 if successful
 */
int process(char **cmd)
{
	pid_t i;
	int status;

	if (!cmd)
	{
		perror("failed");
	}
	/*child process for exec*/
	i = fork();
	/*debugging wahala*/
	if (i == -1)
	{
		perror("Fail");
		return (1);
	}
	/*child process*/
	else if (i == 0)
	{
		if (execve(cmd[0], cmd, NULL) == -1)
		{
			printf("%s\n", cmd[0]);
			perror("Issue execuing");
			exit(-1);
		}
	}
	else
	/*parent process waiting*/
		wait(&status);
	return (0);
}
int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
		;
	return (i);
}

/**
 * space_checker - calulating the number of tokens
 * @i: lenth of sting
 * @s: string to be checked
 * Return: number of tokens
 */
int space_checker(int i, char *s)
{
	int a = 0, n;
	char d[] = " ";

	for (n = 0; n < i; n++)
	{
		if (s[n] == d[0])
		{
			a++;
		}
	}
	return (a++);
}

/**
 * strtoking - tokenization function
 * @s: input string
 * Return: an array of strings
 */

char **strtoking(char *s)
{
	int length, No_tokens, k = 1;
	char *string;
	char d[] = " ";

	length = _strlen(s);
	No_tokens = space_checker(length, s);
/*check this process */
	char **array = malloc((No_tokens + 1) * sizeof(char *));

	string = strtok(s, d);
	array[0] = string;
	while (string != NULL)
	{
		string = strtok(NULL, d);
		array[k] = string;
		k++;
	}
	array[k] = NULL;
	return (array);
}
/**
 * main - shell function
 * @void: nothing
 * Return: value
 */
int main(void)
{
	size_t n = 0;
	char *line = NULL;
	char **tokens;
	int output;

	while (1)
	{
		/*prompt*/
		write(1, "($) ", 5);
		/*takes in command*/
		getline(&line, &n, stdin);
		/*tokenization of string*/
		tokens = strtoking(line);
		/*execution of tokens*/
		output = process(tokens);
	}
	return (0);
}
